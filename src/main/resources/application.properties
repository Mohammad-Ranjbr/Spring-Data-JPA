spring.application.name=SpringData-JPA
server.port=8085

#Show SQL
spring.jpa.properties.hibernate.show_sql=true

#Format SQL
spring.jpa.properties.hibernate.format_sql=true

#Show bind values
#For Spring boot 3.0.2+
logging.level.org.hibernate.orm.jdbc.bind=trace
#For spring boot 3.0.2-
#logging.level.org.hibernate.type.descriptor.sql=trace

#H2 Database console
spring.h2.console.enabled=true

# jdbc:h2:mem:testdb:
# This section shows that the H2 database is used in memory mode and the name of the database is testdb.
# In-memory databases are created temporarily in memory and are destroyed when the application is closed.
# DB_CLOSE_DELAY=-1: This option sets the database not to be closed after the last connection is closed.
# A value of -1 means that the database will persist even if all connections are closed.
# This is useful to prevent accidental closing of the database during tests.
# DB_CLOSE_ON_EXIT=FALSE: This option specifies that the database is not closed when the JVM (Java Virtual Machine) terminates.
# By default, H2 databases are closed in memory mode when the JVM terminates. Setting this option to FALSE reverses this behavior and leaves the database intact.
# MODE=MYSQL: This option specifies that the H2 database runs in MySQL compatibility mode.
# This makes SQL behavior and naming similar to MySQL, which can be useful in an environment that produces MySQL.
# DATABASE_TO_LOWER=true: These options specify that all table and column names are converted to lowercase.
# This helps to avoid problems that may arise due to differences in case (case sensitivity).
# CASE_INSENSITIVE_IDENTIFIERS=true: This option specifies that database identifiers (such as table and column names) are not case-sensitive. This will cause the naming to be case-insensitive.
# This option allows you to set up an in-memory H2 database for your tests that:Run in memory mode.
# remain open even after all connections are closed.
# Runs in compatibility mode with MySQL.
# Table and column names are converted to lowercase letters and are not case-sensitive.
# This option is very useful for testing an application that uses MySQL in a production environment because it simulates MySQL-like databases.

# Load priority: Spring Boot loads configuration files for specific profiles after the main application.properties file.
# This means that configuration values in specific profile files can override values in application.properties.
# The profile is active in the local program. This means that the settings in application-local.properties will take precedence over the settings in application.properties.

spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;MODE=MYSQL;DATABASE_TO_LOWER=TRUE;CASE_INSENSITIVE_IDENTIFIERS=TRUE
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database=mysql
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=validate
# Schema Initialization with Hibernate
# False value: When this option is set to false, Spring Boot will immediately connect to the database
# on startup and run any basic SQL scripts (defined in the schema.sql and data.sql files).
# This option determines whether JPA (Hibernate) will delay starting database operations (such as creating tables and schemas) until after executing SQL scripts.
# No delay in database preparation by JPA: By setting this option to false, database operations will be performed by JPA (such as creating tables) before executing SQL scripts.
# Operation execution order: This setting specifies that JPA will create the tables and schemas first, and then execute the SQL scripts.
spring.jpa.defer-datasource-initialization=false